// Longest Binary Subsequence Less Than or Equal to K

class Solution
{
public:
    // T.C = O(N), S.C = O(1)
    int longestSubsequence(string s, int k)
    {
        // sum will store the value of binary number generated by adding the last digits from the string
        // in order to initially make a number as possible withing the range of k so that
        // most of the 1's can also be included in our answer's count
        long long sum = 0, num = 1;
        int n = s.size();
        int i = n - 1;

        // iterating from right to left until our sum and num aren't out of bounds
        while (i >= 0 and sum <= k and num < k)
        {
            if (s[i] == '1')
                sum += num;
            num *= 2;
            i--;
        }

        long long kk = k;

        // sum is greater so we can't add the i+1th digit so going back to i+2th digit
        if (sum > kk)
        {
            i += 2;
        }
        // // num is greater so we can't add the ith digit so going back to i+1th digit
        else if (num > kk)
            i++;

        // counting the number of digits added till now in our answer
        int count = n - i;
        // now going to  search for 0's from next digits onwards towards the left
        i--;
        while (i >= 0)
        {
            if (s[i] == '0')
                count++;
            i--;
        }

        // if somehow count > n then we'll return n otherwise count which will be our answer
        return count > n ? n : count;
    }
};