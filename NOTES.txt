"STL"
    $ Containers:
        - Array
            Prop: Fixed size
            Methods: front, back, fill, swap, size, empty
        - Vector
            Prop: Dynamic Size
            Methods: same as array + clear, erase, push_back, emplace_back, pop_back
        - Deque
            Prop: Dynamic, Insertion and deletion both ends
            Methods: sam as vector + pop_front, push_front
        - Priority Queue 
            Prop: largest element at top (logarithmic insertion and deletion)
            Methods: top, push, pop, emplace
        - Map 
            Prop: Sorted key(unique) value pairs (logarithmic insertion, deletion, lookup)
            Methods: clear, erase, insert, count, find, lower_bound, upper_bound
        - Unordered_map
            Prop: Not sorted and constant time insertion, deletion, lookup
        - Multi_map
            Prop: Same as map but not unique keys
        - Set
            Prop: Sorted set of unique values (logarithmic insertion, deletion, lookup)
            Methods: same as map
        - Unordered_set
            Prop: Not sorted
        - Multi_Set
            Prop: Not unique keys but sorted
        - Bitset
            Prop: Fixed size sequence of n-bits and uses very less memory
            Methods: all, any, none, count, size, set, reset, flip, + binary_operations




    $ Algorithms:
        - Sort (nlogn)
            sorts the container container in ascending order (by default)
            syntax: sort(startIterator, endIterator); 
            syntax for descending: sort(startIterator, endIterator, greater<Type>());
        - Reverse (n)
            reverse the container
            syntax: reverse(startIterator, endIterator); 
        - max_element (n)
            returns the iterator to the max element
            syntax: *max_element(startIterator, endIterator);
        - min_element (n)
            returns the iterator to the min element
            syntax: *min_element(startIterator, endIterator);
        - accumulate (n)
            returns the sum of the elements
            syntax: accumulate(startIterator, endIterator, initialSum);
        - count (n)
            returns the count of the given element in the given container(or range)
            syntax: count(startIterator, endIterator, elementToCount);
        - find (n)
            returns the iterator the given element else returns end 
            syntax: find(startIterator, endIterator, elementToFind);
        - binary_search (logn)
            works only on SORTED containers (return true if element present else false)
            syntax: binary_search(startIterator, endIterator, elementToFind);
        - lower_bound (logn)
            works only on SORTED containers (returns iterator to first element that is greater
            than or equal to the given element)
            syntax: lower_bound(startIterator, endIterator, element);
        - upper_bound (logn)
            works only on SORTED containers (returns iterator to first element that is just greater
            than the given element)
            syntax: upper_bound(startIterator, endIterator, element);
        - next_permutation:
            Permutes the range [first, last) into the next permutation, where the set of all permutations 
            is ordered lexicographically with respect to operator< or comp. Returns true if such a 
            "next permutation" exists; otherwise transforms the range into the lexicographically first permutation
            syntax: next_permutation(startIterator, endIterator);
        - prev_permutation
            Similar to the next_permutation but different result




    $ Some Tricks
        - Finding the index of the element in a sorted array
            # here, x is the element to be searched 
            cout << (binary_search(arr, arr + n, x) ? (lower_bound(arr, arr + n, x) - arr) : -1) << endl;

            // or we can do it like this
            int index = lower_bound(arr, arr + n, x) - arr;

            if (index < n and arr[index] == x)
                cout << "Element found at: " << index << endl;
            else
                cout << "Element not found\n";

        
        - Finding the index of last occurrence of an element
            auto it = upper_bound(arr, arr + n, x);
            if (it != arr and *(--it) == x)
                cout << "Last occurrence of " << x << " is at " << (it - arr) << endl;
            else cout << "Element not found\n";


        - Finding the number of occurrence of the element
            cout << x << " occurred " << upper_bound(arr, arr + n, x) - lower_bound(arr, arr + n, x) << " times\n";












"SORTING ALGORITHMS"
    (SELECTION SORT)
        Algo:
            FIND THE SMALLEST ELEMENT IN THE UNSORTED PART OF THE ARRAY
            AND SWAP IT WITH THE FIRST ELEMENT OF THE SORTED PART Of ARRAY
        T.C = O(n^2) in all cases.
        S.C = O(1) 
        Cannot terminate the loop early even if the array is sorted.
        Not stable
        O(n^2) comparisons and O(n) swaps in worst case
    
    (Bubble sort)
        Algo:
            MOVE HIGHER VALUE ELEMENTS GENERALLY TO THE RIGHT AND LOWER 
            VALUE ELEMENTS GENERALLY TO THE LEFT
        T.C = O(n^2) worst case and Omega(n) best case 
        S.C = O(1)
        Can terminate the loop early if the array is sorted.
        Stable
        O(n^2) comparisons and O(n^2) swaps in worst case

    (Insertion Sort)
        Algo:
            BUILD YOUR SORTED ARRAY IN PLACE, SHIFTING ELEMENTS OUT OF THE WAY IF
            NECESSARY TO MAKE ROOM FOR THE UNSORTED ELEMENT IN THE SORTED ARRAY
        T.C = O(n^2) worst case and Omega(n) best case 
        S.C = O(1)
        Can terminate the loop early if the array is sorted.
        Stable
        O(n^2) comparisons and O(n^2) swaps in worst case
    
    (Counting Sort)
        Algo:
            COUNT THE FREQ OF EVERY ELEMENT IN ANOTHER ARRAY
            THEN TRAVERSE THE FREQ ARRAY AND ADD EACH ELEMENT TO THE
            OUTPUT ARRAY WHILE DECREASING FREQ OF EACH ELEMENT
        T.C = O(n+k) worst case and Omega(n+k) best case , k = max_element
        S.C = O(k)
        Stable
    
    (Merge Sort)
            Algo:
                DIVIDE THE ARRAY INTO TWO HALVES UNTIL THERE'S ONLY ONE ELEMENT 
                IN THE SUBARRAY THEN START MERGING THE LEFT AND RIGHT HALF IN 
                SORTED MANNER UNTIL THE WHOLE ARRAY IS SORTED
            T.C = O(nlogn) worst case and Omega(nlogn) best case
            S.C = O(n)
            Stable

    (Quick Sort)
    Algo:
        DIVIDE THE ARRAY USING SOME PARTITION WHICH CREATES TWO SUBARRAYS
        THAT HAVE ELEMENTS EITHER LESS OR GREATER THAN THE PIVOT THEN SORT 
        THOSE SUBARRAYS INDIVIDUALLY USING RECURSION.
    T.C = O(n^2) worst case and Omega(nlogn) best case
    S.C = O(1)












"DUTCH NATIONAL FLAG" (Sorting 0s, 1s, 2s in O(N) and one pass)
    suppose an array of elements 0,1,2 only
    mid = low = 0
    high = n-1

    while (mid <= high):
        if (arr[mid] == 1)
            mid++
        else if (arr[mid] == 2)
            swap(arr[mid], arr[high])
            high--
        else if (arr[mid] == 0)
            swap(arr[mid], arr[low])
            low++
            mid++












"KADANE'S ALGORITHM"
    -  Used to find max subarray sum
    - T.C = O(N), S.C = O(1)
    int maxSubArray(vector<int> &nums)
    {
        // assuming the current subarray have maxSubSum
        int maxSubSum = nums[0], sum = 0;

        // iterating through each element
        for (int i: nums)
        {
            // curr sum is negative (so not needed, changing it to curr element)
            if (sum < 0)
                sum = i;
            else sum += i; // otherwise we have positive sum which can be maxSubSum

            // updating our maxSubSum 
            maxSubSum = max(maxSubSum, sum);
        }
        return maxSubSum;
    }












"TREES"
    $ Definition
        Non-linear and a hierarchical data structure consisting of a collection of nodes such that each 
        node of the tree stores a value, a list of references to nodes 

    $ Terminology:
        - Root Node
            Head or starting of the tree

        - Children/Parent Nodes
            Nodes under a given node are children of the given node and the given node will be the Parent of the children nodes
    
        - Leaf Node or External Node
            nodes which do not have any child nodes
            
        - Neighbour of a Node
            Parent or child nodes of that node
        
        - Subtree
            The current node and all the nodes under it is the Subtree of the current node

        - Ancestors
            Suppose their's a node and a node just above it is called a Ancestor as Parent and Parent of Parent is Grand Parent of that node and similarly we can go up in the hierarchy
        
        - Descendants
            All the nodes under a given node are its descendants 
        
        - Sibling
            children of same parent node

        - internal node
            a node with at least 1 child

        - Height of a node
            number of edges on the longest path from that node to a leaf
        
        - Depth of a node
            no. of edges in between the given node and the root node

        - Level 
            each step from top to bottom is called a Level. Root node is at level 0 and levels will keep on increasing till leaf node by 1

        - Degree of a node
           total count of subtrees attached to that node

    $ Binary Trees
        - Definition
            Each node can have at most 2 children nodes

        - Types
            1. "Full Binary Tree" - Every node either has 0 or 2 children
            2. "Complete Binary Tree" - (a) All levels are completely filled except the last level (b) The last level has all nodes on left as possible
            3. "Perfect Binary Tree" - All leaf nodes are at same level
            4. "Balanced Binary Tree" - Height of the tree at max log(N)
            5. "Degenerate Tree" - Every node has a single child node